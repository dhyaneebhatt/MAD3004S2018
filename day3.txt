//: Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"

var friends : [String]
friends = ["Ishav" , "Param", "Rinkudevi", "LA Baburao"]

print("Friends: \(friends)")
//using only aray name without any type

//we want to itarate through array

for frnd in friends{
    print("Friends: \(frnd)")
}

//count properti to retrive n o of elements in array
for itr in 0..<friends.count
{
    print("Friend \(friends[itr])")
}// we r specifying the range
//to get the count we have to pass iteration var itr

for (index,value) in friends.enumerated()
{
    print("index: \(index) value: \(value)")
}//this will return tuple of index and value

// we can use one sided range
for frnd in friends[2...]
{
    print("Friends: \(frnd)")
}
for frnd in friends[...2]
{
    print("Friends: \(frnd)")
}


var numbers = Array(repeating: 1 , count: 4)
print ("Numbers: \(numbers)")

numbers[2]=100
print ("Numbers: \(numbers)")

//constant array's value can not be changed

// for project we can use constant array in plane types

var more = Array(repeating: 0, count: 3)
print("more : \(more)")

//both arrays are of diff type cos first on was of int and one was of float
var all = numbers + more
print("All: \(all)")

for (index,value) in all.enumerated()
{
    print("index: \(index) value: \(value)")
}

print("all[9] \(all[9])")
// we dont have index 9

print("all[9] \(all[3])")
//index 3 is having 1

var grocery = ["Eggs","Milk"]
grocery.append("Rice")
grocery += ["Juice","Sher aata"]

grocery[1...3] = ["Butter","Snacks","Ice Cream"]

grocery.insert("Veggies", at:4)//it will not replace just add the new value
grocery.remove(at: 3)
grocery.removeLast()
print("Grocery : \(grocery)")
//on 1-3 index this values will be added, we can specify the index where we want to add

grocery.removeAll()
if grocery.isEmpty{
    print("No grocery!")
}
else{
    print("Grocery list: \(grocery)")
}
//its an empty array so we have to use append method
var dynamic = [Any]()
dynamic.append("JK")
dynamic.append("7090")
dynamic.append("23.24")
dynamic.append("F")
print("Dynamic: \(dynamic)")

//SETSS
//AlL TYPES HAS TO BE HASH TYPES
//Any datatype is not hashable so it should nt be used in sets

var languages = Set<String>()
languages.insert("Hindi")
languages.insert("Gujarati")
languages.insert("Punjabi")
languages.insert("Portuguese")
languages.insert("English")
languages.remove("English")

if languages.isEmpty{
    print("No language")
}
else{
    print("languages: \(languages.count) langauges: \(languages)")
    
    for lang in languages.sorted()
    {
        print("language: \(lang)")
    }
}
//contains-true or false

//SETSS
//AlL TYPES HAS TO BE HASH TYPES
//Any datatype is not hashable so it should nt be used in sets

var languages = Set<String>()
languages.insert("Hindi")
languages.insert("Gujarati")
languages.insert("Punjabi")
languages.insert("Portuguese")
languages.insert("English")
languages.remove("English")

if languages.isEmpty{
    print("No language")
}
else{
    print("languages: \(languages.count) langauges: \(languages)")
    
    for lang in languages.sorted()
    {
        print("language: \(lang)")
    }
}
//contains-true or false
//declaring a set
let motherTongue : Set = ["Gujarati","Punjabi","Portuguese","Telugu"]

print("motherTongue: \(motherTongue)")

//set methods: intersection-common values, union-all values, symattric diff-it will omit common values. subtracting-

print ("Union: \(languages.union(motherTongue).sorted())")
print ("Intersection : \(languages.intersection(motherTongue).sorted())")
print ("Subtracing: \(languages.subtracting(motherTongue).sorted())")
print ("SymmetricDifference: \(languages.symmetricDifference(motherTongue).sorted())")

//isDisjoint-check 2 sets r nt hving common values
let houseAnimals: Set = ["üê∂", "üê±"]
let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]
let cityAnimals: Set = ["üê¶", "üê≠"]

print("\(houseAnimals.isSubset(of: farmAnimals))")
// true
print("\(farmAnimals.isSuperset(of: houseAnimals))")
// true
print("\(farmAnimals.isDisjoint(with: cityAnimals))")
// true


//Dictonary

var namesofInt = [Int : String]()
namesofInt[20] = "Twenty"
print("value of key 20 \(namesofInt[20])")
namesofInt[2] = "Two"
print("value of key 2 \(namesofInt[2])")

print("value of Int contains\(namesofInt.count) items")

//initialize a dic with empty bracates than all data will be deleted nd dic will be empty
namesofInt = [:]
if namesofInt.isEmpty{
    print("No item in dictonary")
}
//dic of error code nd msg
var HTTPErrorCode : [Int : String] = [400:"Bad Request", 402:"Payment required", 404:"Page NOT Found", 406:"Not Acceptable"]

HTTPErrorCode[405] = "Method not allowed"

print("Error code : \(HTTPErrorCode)")

let old402 = HTTPErrorCode.updateValue("Reserved for future", forKey: 402)
print("Error code : \(HTTPErrorCode)")

if let errMSG406 = HTTPErrorCode[403]{
    print("Error msg for 406 \(errMSG406)")
}
else{
    print("No error code 403 is available")
}// ans: nill

HTTPErrorCode[406] = nil
print("Error code : \(HTTPErrorCode)")

//no value can contain nil in dic, if its containg nil then it will be removed

if let removedValue = HTTPErrorCode.removeValue(forKey: 402)
{
    print("Removed value")
}
else{
    print("Error code 402 not available")
}

//to retrive error codes only
for errorCode in HTTPErrorCode.keys{
    print("Error code: \(errorCode)")
}
for errorMsg in HTTPErrorCode.values
{
    print("Error msg: \(errorMsg)")
}

for(errorCode, errorMsg) in HTTPErrorCode
{
    print("Error code: \(errorCode) --- Error msg: \(errorMsg)")
}

let errorCodeList = HTTPErrorCode.keys
print("Error code list: \(errorCodeList)")

//if key value is string than any value can be saved for any key
var flight = [String : AnyObject] ()
flight["number"] = "AC043" as AnyObject
flight["duration"] = 14 as AnyObject
flight["cost"] = 1600.26 as AnyObject

print("Flight \(flight) ")

//any- hashable types, anyobject is for object we use in class
//diff btwn all 3 collections
// array can contain same value
// array is sequential, set nf ic are nt sequantial
